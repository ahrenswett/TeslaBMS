// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tesla_bms.proto

#include "tesla_bms.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tesla_5fbms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_Module_tesla_5fbms_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tesla_5fbms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pack_Module_Cell_tesla_5fbms_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tesla_5fbms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_Module_CellsEntry_DoNotUse_tesla_5fbms_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tesla_5fbms_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_ModulesEntry_DoNotUse_tesla_5fbms_2eproto;
namespace TeslaBMS {
class Pack_ModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack_ModulesEntry_DoNotUse> _instance;
} _Pack_ModulesEntry_DoNotUse_default_instance_;
class Pack_Module_CellsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack_Module_CellsEntry_DoNotUse> _instance;
} _Pack_Module_CellsEntry_DoNotUse_default_instance_;
class Pack_Module_CellDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack_Module_Cell> _instance;
} _Pack_Module_Cell_default_instance_;
class Pack_ModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack_Module> _instance;
} _Pack_Module_default_instance_;
class PackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pack> _instance;
} _Pack_default_instance_;
}  // namespace TeslaBMS
static void InitDefaultsscc_info_Pack_tesla_5fbms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeslaBMS::_Pack_default_instance_;
    new (ptr) ::TeslaBMS::Pack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeslaBMS::Pack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_tesla_5fbms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pack_tesla_5fbms_2eproto}, {
      &scc_info_Pack_ModulesEntry_DoNotUse_tesla_5fbms_2eproto.base,}};

static void InitDefaultsscc_info_Pack_Module_tesla_5fbms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeslaBMS::_Pack_Module_default_instance_;
    new (ptr) ::TeslaBMS::Pack_Module();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeslaBMS::Pack_Module::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_Module_tesla_5fbms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pack_Module_tesla_5fbms_2eproto}, {
      &scc_info_Pack_Module_CellsEntry_DoNotUse_tesla_5fbms_2eproto.base,}};

static void InitDefaultsscc_info_Pack_Module_Cell_tesla_5fbms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeslaBMS::_Pack_Module_Cell_default_instance_;
    new (ptr) ::TeslaBMS::Pack_Module_Cell();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeslaBMS::Pack_Module_Cell::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pack_Module_Cell_tesla_5fbms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pack_Module_Cell_tesla_5fbms_2eproto}, {}};

static void InitDefaultsscc_info_Pack_Module_CellsEntry_DoNotUse_tesla_5fbms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeslaBMS::_Pack_Module_CellsEntry_DoNotUse_default_instance_;
    new (ptr) ::TeslaBMS::Pack_Module_CellsEntry_DoNotUse();
  }
  ::TeslaBMS::Pack_Module_CellsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_Module_CellsEntry_DoNotUse_tesla_5fbms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pack_Module_CellsEntry_DoNotUse_tesla_5fbms_2eproto}, {
      &scc_info_Pack_Module_Cell_tesla_5fbms_2eproto.base,}};

static void InitDefaultsscc_info_Pack_ModulesEntry_DoNotUse_tesla_5fbms_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::TeslaBMS::_Pack_ModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::TeslaBMS::Pack_ModulesEntry_DoNotUse();
  }
  ::TeslaBMS::Pack_ModulesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pack_ModulesEntry_DoNotUse_tesla_5fbms_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pack_ModulesEntry_DoNotUse_tesla_5fbms_2eproto}, {
      &scc_info_Pack_Module_tesla_5fbms_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tesla_5fbms_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tesla_5fbms_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tesla_5fbms_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tesla_5fbms_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_ModulesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_ModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_ModulesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_ModulesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_CellsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_CellsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_CellsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_CellsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_Cell, cellid_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_Cell, cellvolt_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module_Cell, balancestate_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, id_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, modulevoltage_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, moduletemp_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, lowestcellvolt_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, highestcellvolt_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack_Module, cells_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, name_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, id_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, numberofmodules_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, currentvoltage_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, averagepacktemp_),
  PROTOBUF_FIELD_OFFSET(::TeslaBMS::Pack, modules_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::TeslaBMS::Pack_ModulesEntry_DoNotUse)},
  { 9, 16, sizeof(::TeslaBMS::Pack_Module_CellsEntry_DoNotUse)},
  { 18, -1, sizeof(::TeslaBMS::Pack_Module_Cell)},
  { 26, 37, sizeof(::TeslaBMS::Pack_Module)},
  { 43, 54, sizeof(::TeslaBMS::Pack)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeslaBMS::_Pack_ModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeslaBMS::_Pack_Module_CellsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeslaBMS::_Pack_Module_Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeslaBMS::_Pack_Module_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::TeslaBMS::_Pack_default_instance_),
};

const char descriptor_table_protodef_tesla_5fbms_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017tesla_bms.proto\022\010TeslaBMS\"\215\004\n\004Pack\022\014\n\004"
  "name\030\001 \002(\t\022\n\n\002id\030\002 \002(\005\022\027\n\017numberOfModule"
  "s\030\003 \002(\005\022\026\n\016currentVoltage\030\004 \002(\005\022\027\n\017avera"
  "gePacktemp\030\005 \002(\005\022,\n\007modules\030\006 \003(\0132\033.Tesl"
  "aBMS.Pack.ModulesEntry\032E\n\014ModulesEntry\022\013"
  "\n\003key\030\001 \001(\005\022$\n\005value\030\002 \001(\0132\025.TeslaBMS.Pa"
  "ck.Module:\0028\001\032\253\002\n\006Module\022\n\n\002id\030\001 \002(\t\022\025\n\r"
  "moduleVoltage\030\002 \002(\002\022\022\n\nmoduleTemp\030\003 \002(\002\022"
  "\026\n\016lowestCellVolt\030\004 \002(\002\022\027\n\017highestCellVo"
  "lt\030\005 \002(\002\022/\n\005cells\030\006 \003(\0132 .TeslaBMS.Pack."
  "Module.CellsEntry\032H\n\nCellsEntry\022\013\n\003key\030\001"
  " \001(\005\022)\n\005value\030\002 \001(\0132\032.TeslaBMS.Pack.Modu"
  "le.Cell:\0028\001\032>\n\004Cell\022\016\n\006cellId\030\001 \003(\005\022\020\n\010c"
  "ellVolt\030\002 \003(\002\022\024\n\014balanceState\030\003 \003(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tesla_5fbms_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tesla_5fbms_2eproto_sccs[5] = {
  &scc_info_Pack_tesla_5fbms_2eproto.base,
  &scc_info_Pack_Module_tesla_5fbms_2eproto.base,
  &scc_info_Pack_Module_Cell_tesla_5fbms_2eproto.base,
  &scc_info_Pack_Module_CellsEntry_DoNotUse_tesla_5fbms_2eproto.base,
  &scc_info_Pack_ModulesEntry_DoNotUse_tesla_5fbms_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tesla_5fbms_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tesla_5fbms_2eproto = {
  false, false, descriptor_table_protodef_tesla_5fbms_2eproto, "tesla_bms.proto", 555,
  &descriptor_table_tesla_5fbms_2eproto_once, descriptor_table_tesla_5fbms_2eproto_sccs, descriptor_table_tesla_5fbms_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_tesla_5fbms_2eproto::offsets,
  file_level_metadata_tesla_5fbms_2eproto, 5, file_level_enum_descriptors_tesla_5fbms_2eproto, file_level_service_descriptors_tesla_5fbms_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tesla_5fbms_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tesla_5fbms_2eproto)), true);
namespace TeslaBMS {

// ===================================================================

Pack_ModulesEntry_DoNotUse::Pack_ModulesEntry_DoNotUse() {}
Pack_ModulesEntry_DoNotUse::Pack_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pack_ModulesEntry_DoNotUse::MergeFrom(const Pack_ModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pack_ModulesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Pack_ModulesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Pack_Module_CellsEntry_DoNotUse::Pack_Module_CellsEntry_DoNotUse() {}
Pack_Module_CellsEntry_DoNotUse::Pack_Module_CellsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Pack_Module_CellsEntry_DoNotUse::MergeFrom(const Pack_Module_CellsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Pack_Module_CellsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Pack_Module_CellsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Pack_Module_Cell::InitAsDefaultInstance() {
}
class Pack_Module_Cell::_Internal {
 public:
};

Pack_Module_Cell::Pack_Module_Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cellid_(arena),
  cellvolt_(arena),
  balancestate_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeslaBMS.Pack.Module.Cell)
}
Pack_Module_Cell::Pack_Module_Cell(const Pack_Module_Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cellid_(from.cellid_),
      cellvolt_(from.cellvolt_),
      balancestate_(from.balancestate_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TeslaBMS.Pack.Module.Cell)
}

void Pack_Module_Cell::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pack_Module_Cell_tesla_5fbms_2eproto.base);
}

Pack_Module_Cell::~Pack_Module_Cell() {
  // @@protoc_insertion_point(destructor:TeslaBMS.Pack.Module.Cell)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pack_Module_Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pack_Module_Cell::ArenaDtor(void* object) {
  Pack_Module_Cell* _this = reinterpret_cast< Pack_Module_Cell* >(object);
  (void)_this;
}
void Pack_Module_Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pack_Module_Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pack_Module_Cell& Pack_Module_Cell::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pack_Module_Cell_tesla_5fbms_2eproto.base);
  return *internal_default_instance();
}


void Pack_Module_Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:TeslaBMS.Pack.Module.Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cellid_.Clear();
  cellvolt_.Clear();
  balancestate_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack_Module_Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 cellId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cellid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_cellid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float cellVolt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cellvolt(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_cellvolt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string balanceState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_balancestate();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TeslaBMS.Pack.Module.Cell.balanceState");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pack_Module_Cell::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeslaBMS.Pack.Module.Cell)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 cellId = 1;
  for (int i = 0, n = this->_internal_cellid_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_cellid(i), target);
  }

  // repeated float cellVolt = 2;
  for (int i = 0, n = this->_internal_cellvolt_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_cellvolt(i), target);
  }

  // repeated string balanceState = 3;
  for (int i = 0, n = this->_internal_balancestate_size(); i < n; i++) {
    const auto& s = this->_internal_balancestate(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TeslaBMS.Pack.Module.Cell.balanceState");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeslaBMS.Pack.Module.Cell)
  return target;
}

size_t Pack_Module_Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeslaBMS.Pack.Module.Cell)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 cellId = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->cellid_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cellid_size());
    total_size += data_size;
  }

  // repeated float cellVolt = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cellvolt_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cellvolt_size());
    total_size += data_size;
  }

  // repeated string balanceState = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(balancestate_.size());
  for (int i = 0, n = balancestate_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      balancestate_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pack_Module_Cell::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeslaBMS.Pack.Module.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  const Pack_Module_Cell* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pack_Module_Cell>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeslaBMS.Pack.Module.Cell)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeslaBMS.Pack.Module.Cell)
    MergeFrom(*source);
  }
}

void Pack_Module_Cell::MergeFrom(const Pack_Module_Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeslaBMS.Pack.Module.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cellid_.MergeFrom(from.cellid_);
  cellvolt_.MergeFrom(from.cellvolt_);
  balancestate_.MergeFrom(from.balancestate_);
}

void Pack_Module_Cell::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeslaBMS.Pack.Module.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pack_Module_Cell::CopyFrom(const Pack_Module_Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeslaBMS.Pack.Module.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack_Module_Cell::IsInitialized() const {
  return true;
}

void Pack_Module_Cell::InternalSwap(Pack_Module_Cell* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cellid_.InternalSwap(&other->cellid_);
  cellvolt_.InternalSwap(&other->cellvolt_);
  balancestate_.InternalSwap(&other->balancestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack_Module_Cell::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pack_Module::InitAsDefaultInstance() {
}
class Pack_Module::_Internal {
 public:
  using HasBits = decltype(std::declval<Pack_Module>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modulevoltage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_moduletemp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lowestcellvolt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_highestcellvolt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

Pack_Module::Pack_Module(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cells_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeslaBMS.Pack.Module)
}
Pack_Module::Pack_Module(const Pack_Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cells_.MergeFrom(from.cells_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&modulevoltage_, &from.modulevoltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&highestcellvolt_) -
    reinterpret_cast<char*>(&modulevoltage_)) + sizeof(highestcellvolt_));
  // @@protoc_insertion_point(copy_constructor:TeslaBMS.Pack.Module)
}

void Pack_Module::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pack_Module_tesla_5fbms_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modulevoltage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&highestcellvolt_) -
      reinterpret_cast<char*>(&modulevoltage_)) + sizeof(highestcellvolt_));
}

Pack_Module::~Pack_Module() {
  // @@protoc_insertion_point(destructor:TeslaBMS.Pack.Module)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pack_Module::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pack_Module::ArenaDtor(void* object) {
  Pack_Module* _this = reinterpret_cast< Pack_Module* >(object);
  (void)_this;
}
void Pack_Module::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pack_Module::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pack_Module& Pack_Module::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pack_Module_tesla_5fbms_2eproto.base);
  return *internal_default_instance();
}


void Pack_Module::Clear() {
// @@protoc_insertion_point(message_clear_start:TeslaBMS.Pack.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&modulevoltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&highestcellvolt_) -
        reinterpret_cast<char*>(&modulevoltage_)) + sizeof(highestcellvolt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack_Module::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TeslaBMS.Pack.Module.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float moduleVoltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_modulevoltage(&has_bits);
          modulevoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float moduleTemp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_moduletemp(&has_bits);
          moduletemp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float lowestCellVolt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_lowestcellvolt(&has_bits);
          lowestcellvolt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float highestCellVolt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_highestcellvolt(&has_bits);
          highestcellvolt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // map<int32, .TeslaBMS.Pack.Module.Cell> cells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cells_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pack_Module::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeslaBMS.Pack.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TeslaBMS.Pack.Module.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required float moduleVoltage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_modulevoltage(), target);
  }

  // required float moduleTemp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_moduletemp(), target);
  }

  // required float lowestCellVolt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_lowestcellvolt(), target);
  }

  // required float highestCellVolt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_highestcellvolt(), target);
  }

  // map<int32, .TeslaBMS.Pack.Module.Cell> cells = 6;
  if (!this->_internal_cells().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_cells().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_cells().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >::const_iterator
          it = this->_internal_cells().begin();
          it != this->_internal_cells().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Pack_Module_CellsEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >::const_iterator
          it = this->_internal_cells().begin();
          it != this->_internal_cells().end(); ++it) {
        target = Pack_Module_CellsEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeslaBMS.Pack.Module)
  return target;
}

size_t Pack_Module::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TeslaBMS.Pack.Module)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_modulevoltage()) {
    // required float moduleVoltage = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_moduletemp()) {
    // required float moduleTemp = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_lowestcellvolt()) {
    // required float lowestCellVolt = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_highestcellvolt()) {
    // required float highestCellVolt = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Pack_Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeslaBMS.Pack.Module)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required float moduleVoltage = 2;
    total_size += 1 + 4;

    // required float moduleTemp = 3;
    total_size += 1 + 4;

    // required float lowestCellVolt = 4;
    total_size += 1 + 4;

    // required float highestCellVolt = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .TeslaBMS.Pack.Module.Cell> cells = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cells_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >::const_iterator
      it = this->_internal_cells().begin();
      it != this->_internal_cells().end(); ++it) {
    total_size += Pack_Module_CellsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pack_Module::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeslaBMS.Pack.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const Pack_Module* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pack_Module>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeslaBMS.Pack.Module)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeslaBMS.Pack.Module)
    MergeFrom(*source);
  }
}

void Pack_Module::MergeFrom(const Pack_Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeslaBMS.Pack.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      modulevoltage_ = from.modulevoltage_;
    }
    if (cached_has_bits & 0x00000004u) {
      moduletemp_ = from.moduletemp_;
    }
    if (cached_has_bits & 0x00000008u) {
      lowestcellvolt_ = from.lowestcellvolt_;
    }
    if (cached_has_bits & 0x00000010u) {
      highestcellvolt_ = from.highestcellvolt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pack_Module::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeslaBMS.Pack.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pack_Module::CopyFrom(const Pack_Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeslaBMS.Pack.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack_Module::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Pack_Module::InternalSwap(Pack_Module* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cells_.Swap(&other->cells_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pack_Module, highestcellvolt_)
      + sizeof(Pack_Module::highestcellvolt_)
      - PROTOBUF_FIELD_OFFSET(Pack_Module, modulevoltage_)>(
          reinterpret_cast<char*>(&modulevoltage_),
          reinterpret_cast<char*>(&other->modulevoltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack_Module::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pack::InitAsDefaultInstance() {
}
class Pack::_Internal {
 public:
  using HasBits = decltype(std::declval<Pack>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_numberofmodules(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currentvoltage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_averagepacktemp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

Pack::Pack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  modules_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:TeslaBMS.Pack)
}
Pack::Pack(const Pack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modules_.MergeFrom(from.modules_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&averagepacktemp_) -
    reinterpret_cast<char*>(&id_)) + sizeof(averagepacktemp_));
  // @@protoc_insertion_point(copy_constructor:TeslaBMS.Pack)
}

void Pack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pack_tesla_5fbms_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&averagepacktemp_) -
      reinterpret_cast<char*>(&id_)) + sizeof(averagepacktemp_));
}

Pack::~Pack() {
  // @@protoc_insertion_point(destructor:TeslaBMS.Pack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Pack::ArenaDtor(void* object) {
  Pack* _this = reinterpret_cast< Pack* >(object);
  (void)_this;
}
void Pack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pack& Pack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pack_tesla_5fbms_2eproto.base);
  return *internal_default_instance();
}


void Pack::Clear() {
// @@protoc_insertion_point(message_clear_start:TeslaBMS.Pack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  modules_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&averagepacktemp_) -
        reinterpret_cast<char*>(&id_)) + sizeof(averagepacktemp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "TeslaBMS.Pack.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 numberOfModules = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_numberofmodules(&has_bits);
          numberofmodules_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 currentVoltage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_currentvoltage(&has_bits);
          currentvoltage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 averagePacktemp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_averagepacktemp(&has_bits);
          averagepacktemp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .TeslaBMS.Pack.Module> modules = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&modules_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TeslaBMS.Pack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TeslaBMS.Pack.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required int32 id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_id(), target);
  }

  // required int32 numberOfModules = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_numberofmodules(), target);
  }

  // required int32 currentVoltage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_currentvoltage(), target);
  }

  // required int32 averagePacktemp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_averagepacktemp(), target);
  }

  // map<int32, .TeslaBMS.Pack.Module> modules = 6;
  if (!this->_internal_modules().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_modules().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_modules().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >::const_iterator
          it = this->_internal_modules().begin();
          it != this->_internal_modules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Pack_ModulesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >::const_iterator
          it = this->_internal_modules().begin();
          it != this->_internal_modules().end(); ++it) {
        target = Pack_ModulesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeslaBMS.Pack)
  return target;
}

size_t Pack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TeslaBMS.Pack)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_numberofmodules()) {
    // required int32 numberOfModules = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofmodules());
  }

  if (_internal_has_currentvoltage()) {
    // required int32 currentVoltage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentvoltage());
  }

  if (_internal_has_averagepacktemp()) {
    // required int32 averagePacktemp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_averagepacktemp());
  }

  return total_size;
}
size_t Pack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeslaBMS.Pack)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 numberOfModules = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_numberofmodules());

    // required int32 currentVoltage = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_currentvoltage());

    // required int32 averagePacktemp = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_averagepacktemp());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .TeslaBMS.Pack.Module> modules = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_modules_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >::const_iterator
      it = this->_internal_modules().begin();
      it != this->_internal_modules().end(); ++it) {
    total_size += Pack_ModulesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeslaBMS.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  const Pack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeslaBMS.Pack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeslaBMS.Pack)
    MergeFrom(*source);
  }
}

void Pack::MergeFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeslaBMS.Pack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      numberofmodules_ = from.numberofmodules_;
    }
    if (cached_has_bits & 0x00000008u) {
      currentvoltage_ = from.currentvoltage_;
    }
    if (cached_has_bits & 0x00000010u) {
      averagepacktemp_ = from.averagepacktemp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeslaBMS.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pack::CopyFrom(const Pack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeslaBMS.Pack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(modules_)) return false;
  return true;
}

void Pack::InternalSwap(Pack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modules_.Swap(&other->modules_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pack, averagepacktemp_)
      + sizeof(Pack::averagepacktemp_)
      - PROTOBUF_FIELD_OFFSET(Pack, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pack::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace TeslaBMS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TeslaBMS::Pack_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage< ::TeslaBMS::Pack_ModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeslaBMS::Pack_ModulesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TeslaBMS::Pack_Module_CellsEntry_DoNotUse* Arena::CreateMaybeMessage< ::TeslaBMS::Pack_Module_CellsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeslaBMS::Pack_Module_CellsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::TeslaBMS::Pack_Module_Cell* Arena::CreateMaybeMessage< ::TeslaBMS::Pack_Module_Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeslaBMS::Pack_Module_Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::TeslaBMS::Pack_Module* Arena::CreateMaybeMessage< ::TeslaBMS::Pack_Module >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeslaBMS::Pack_Module >(arena);
}
template<> PROTOBUF_NOINLINE ::TeslaBMS::Pack* Arena::CreateMaybeMessage< ::TeslaBMS::Pack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TeslaBMS::Pack >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
