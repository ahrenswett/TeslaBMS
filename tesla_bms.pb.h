// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tesla_bms.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tesla_5fbms_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tesla_5fbms_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tesla_5fbms_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tesla_5fbms_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tesla_5fbms_2eproto;
namespace TeslaBMS {
class Pack;
class PackDefaultTypeInternal;
extern PackDefaultTypeInternal _Pack_default_instance_;
class Pack_Module;
class Pack_ModuleDefaultTypeInternal;
extern Pack_ModuleDefaultTypeInternal _Pack_Module_default_instance_;
class Pack_Module_Cell;
class Pack_Module_CellDefaultTypeInternal;
extern Pack_Module_CellDefaultTypeInternal _Pack_Module_Cell_default_instance_;
class Pack_Module_CellsEntry_DoNotUse;
class Pack_Module_CellsEntry_DoNotUseDefaultTypeInternal;
extern Pack_Module_CellsEntry_DoNotUseDefaultTypeInternal _Pack_Module_CellsEntry_DoNotUse_default_instance_;
class Pack_ModulesEntry_DoNotUse;
class Pack_ModulesEntry_DoNotUseDefaultTypeInternal;
extern Pack_ModulesEntry_DoNotUseDefaultTypeInternal _Pack_ModulesEntry_DoNotUse_default_instance_;
}  // namespace TeslaBMS
PROTOBUF_NAMESPACE_OPEN
template<> ::TeslaBMS::Pack* Arena::CreateMaybeMessage<::TeslaBMS::Pack>(Arena*);
template<> ::TeslaBMS::Pack_Module* Arena::CreateMaybeMessage<::TeslaBMS::Pack_Module>(Arena*);
template<> ::TeslaBMS::Pack_Module_Cell* Arena::CreateMaybeMessage<::TeslaBMS::Pack_Module_Cell>(Arena*);
template<> ::TeslaBMS::Pack_Module_CellsEntry_DoNotUse* Arena::CreateMaybeMessage<::TeslaBMS::Pack_Module_CellsEntry_DoNotUse>(Arena*);
template<> ::TeslaBMS::Pack_ModulesEntry_DoNotUse* Arena::CreateMaybeMessage<::TeslaBMS::Pack_ModulesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TeslaBMS {

// ===================================================================

class Pack_ModulesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pack_ModulesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pack_ModulesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Pack_ModulesEntry_DoNotUse();
  explicit Pack_ModulesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pack_ModulesEntry_DoNotUse& other);
  static const Pack_ModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pack_ModulesEntry_DoNotUse*>(&_Pack_ModulesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tesla_5fbms_2eproto);
    return ::descriptor_table_tesla_5fbms_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class Pack_Module_CellsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pack_Module_CellsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pack_Module_CellsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Pack_Module_CellsEntry_DoNotUse();
  explicit Pack_Module_CellsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pack_Module_CellsEntry_DoNotUse& other);
  static const Pack_Module_CellsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pack_Module_CellsEntry_DoNotUse*>(&_Pack_Module_CellsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tesla_5fbms_2eproto);
    return ::descriptor_table_tesla_5fbms_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Pack_Module_Cell PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeslaBMS.Pack.Module.Cell) */ {
 public:
  inline Pack_Module_Cell() : Pack_Module_Cell(nullptr) {}
  virtual ~Pack_Module_Cell();

  Pack_Module_Cell(const Pack_Module_Cell& from);
  Pack_Module_Cell(Pack_Module_Cell&& from) noexcept
    : Pack_Module_Cell() {
    *this = ::std::move(from);
  }

  inline Pack_Module_Cell& operator=(const Pack_Module_Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pack_Module_Cell& operator=(Pack_Module_Cell&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pack_Module_Cell& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pack_Module_Cell* internal_default_instance() {
    return reinterpret_cast<const Pack_Module_Cell*>(
               &_Pack_Module_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pack_Module_Cell& a, Pack_Module_Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Pack_Module_Cell* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pack_Module_Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pack_Module_Cell* New() const final {
    return CreateMaybeMessage<Pack_Module_Cell>(nullptr);
  }

  Pack_Module_Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pack_Module_Cell>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pack_Module_Cell& from);
  void MergeFrom(const Pack_Module_Cell& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pack_Module_Cell* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeslaBMS.Pack.Module.Cell";
  }
  protected:
  explicit Pack_Module_Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tesla_5fbms_2eproto);
    return ::descriptor_table_tesla_5fbms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIdFieldNumber = 1,
    kCellVoltFieldNumber = 2,
    kBalanceStateFieldNumber = 3,
  };
  // repeated int32 cellId = 1;
  int cellid_size() const;
  private:
  int _internal_cellid_size() const;
  public:
  void clear_cellid();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cellid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_cellid() const;
  void _internal_add_cellid(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_cellid();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 cellid(int index) const;
  void set_cellid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_cellid(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      cellid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_cellid();

  // repeated float cellVolt = 2;
  int cellvolt_size() const;
  private:
  int _internal_cellvolt_size() const;
  public:
  void clear_cellvolt();
  private:
  float _internal_cellvolt(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_cellvolt() const;
  void _internal_add_cellvolt(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_cellvolt();
  public:
  float cellvolt(int index) const;
  void set_cellvolt(int index, float value);
  void add_cellvolt(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      cellvolt() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_cellvolt();

  // repeated string balanceState = 3;
  int balancestate_size() const;
  private:
  int _internal_balancestate_size() const;
  public:
  void clear_balancestate();
  const std::string& balancestate(int index) const;
  std::string* mutable_balancestate(int index);
  void set_balancestate(int index, const std::string& value);
  void set_balancestate(int index, std::string&& value);
  void set_balancestate(int index, const char* value);
  void set_balancestate(int index, const char* value, size_t size);
  std::string* add_balancestate();
  void add_balancestate(const std::string& value);
  void add_balancestate(std::string&& value);
  void add_balancestate(const char* value);
  void add_balancestate(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& balancestate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_balancestate();
  private:
  const std::string& _internal_balancestate(int index) const;
  std::string* _internal_add_balancestate();
  public:

  // @@protoc_insertion_point(class_scope:TeslaBMS.Pack.Module.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > cellid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > cellvolt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> balancestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tesla_5fbms_2eproto;
};
// -------------------------------------------------------------------

class Pack_Module PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeslaBMS.Pack.Module) */ {
 public:
  inline Pack_Module() : Pack_Module(nullptr) {}
  virtual ~Pack_Module();

  Pack_Module(const Pack_Module& from);
  Pack_Module(Pack_Module&& from) noexcept
    : Pack_Module() {
    *this = ::std::move(from);
  }

  inline Pack_Module& operator=(const Pack_Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pack_Module& operator=(Pack_Module&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pack_Module& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pack_Module* internal_default_instance() {
    return reinterpret_cast<const Pack_Module*>(
               &_Pack_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pack_Module& a, Pack_Module& b) {
    a.Swap(&b);
  }
  inline void Swap(Pack_Module* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pack_Module* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pack_Module* New() const final {
    return CreateMaybeMessage<Pack_Module>(nullptr);
  }

  Pack_Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pack_Module>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pack_Module& from);
  void MergeFrom(const Pack_Module& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pack_Module* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeslaBMS.Pack.Module";
  }
  protected:
  explicit Pack_Module(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tesla_5fbms_2eproto);
    return ::descriptor_table_tesla_5fbms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Pack_Module_Cell Cell;

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 6,
    kIdFieldNumber = 1,
    kModuleVoltageFieldNumber = 2,
    kModuleTempFieldNumber = 3,
    kLowestCellVoltFieldNumber = 4,
    kHighestCellVoltFieldNumber = 5,
  };
  // map<int32, .TeslaBMS.Pack.Module.Cell> cells = 6;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >&
      _internal_cells() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >*
      _internal_mutable_cells();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >&
      cells() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >*
      mutable_cells();

  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required float moduleVoltage = 2;
  bool has_modulevoltage() const;
  private:
  bool _internal_has_modulevoltage() const;
  public:
  void clear_modulevoltage();
  float modulevoltage() const;
  void set_modulevoltage(float value);
  private:
  float _internal_modulevoltage() const;
  void _internal_set_modulevoltage(float value);
  public:

  // required float moduleTemp = 3;
  bool has_moduletemp() const;
  private:
  bool _internal_has_moduletemp() const;
  public:
  void clear_moduletemp();
  float moduletemp() const;
  void set_moduletemp(float value);
  private:
  float _internal_moduletemp() const;
  void _internal_set_moduletemp(float value);
  public:

  // required float lowestCellVolt = 4;
  bool has_lowestcellvolt() const;
  private:
  bool _internal_has_lowestcellvolt() const;
  public:
  void clear_lowestcellvolt();
  float lowestcellvolt() const;
  void set_lowestcellvolt(float value);
  private:
  float _internal_lowestcellvolt() const;
  void _internal_set_lowestcellvolt(float value);
  public:

  // required float highestCellVolt = 5;
  bool has_highestcellvolt() const;
  private:
  bool _internal_has_highestcellvolt() const;
  public:
  void clear_highestcellvolt();
  float highestcellvolt() const;
  void set_highestcellvolt(float value);
  private:
  float _internal_highestcellvolt() const;
  void _internal_set_highestcellvolt(float value);
  public:

  // @@protoc_insertion_point(class_scope:TeslaBMS.Pack.Module)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pack_Module_CellsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > cells_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  float modulevoltage_;
  float moduletemp_;
  float lowestcellvolt_;
  float highestcellvolt_;
  friend struct ::TableStruct_tesla_5fbms_2eproto;
};
// -------------------------------------------------------------------

class Pack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TeslaBMS.Pack) */ {
 public:
  inline Pack() : Pack(nullptr) {}
  virtual ~Pack();

  Pack(const Pack& from);
  Pack(Pack&& from) noexcept
    : Pack() {
    *this = ::std::move(from);
  }

  inline Pack& operator=(const Pack& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pack& operator=(Pack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pack* internal_default_instance() {
    return reinterpret_cast<const Pack*>(
               &_Pack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Pack& a, Pack& b) {
    a.Swap(&b);
  }
  inline void Swap(Pack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pack* New() const final {
    return CreateMaybeMessage<Pack>(nullptr);
  }

  Pack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pack& from);
  void MergeFrom(const Pack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TeslaBMS.Pack";
  }
  protected:
  explicit Pack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tesla_5fbms_2eproto);
    return ::descriptor_table_tesla_5fbms_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Pack_Module Module;

  // accessors -------------------------------------------------------

  enum : int {
    kModulesFieldNumber = 6,
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kNumberOfModulesFieldNumber = 3,
    kCurrentVoltageFieldNumber = 4,
    kAveragePacktempFieldNumber = 5,
  };
  // map<int32, .TeslaBMS.Pack.Module> modules = 6;
  int modules_size() const;
  private:
  int _internal_modules_size() const;
  public:
  void clear_modules();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >&
      _internal_modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >*
      _internal_mutable_modules();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >&
      modules() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >*
      mutable_modules();

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 numberOfModules = 3;
  bool has_numberofmodules() const;
  private:
  bool _internal_has_numberofmodules() const;
  public:
  void clear_numberofmodules();
  ::PROTOBUF_NAMESPACE_ID::int32 numberofmodules() const;
  void set_numberofmodules(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_numberofmodules() const;
  void _internal_set_numberofmodules(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 currentVoltage = 4;
  bool has_currentvoltage() const;
  private:
  bool _internal_has_currentvoltage() const;
  public:
  void clear_currentvoltage();
  ::PROTOBUF_NAMESPACE_ID::int32 currentvoltage() const;
  void set_currentvoltage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_currentvoltage() const;
  void _internal_set_currentvoltage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 averagePacktemp = 5;
  bool has_averagepacktemp() const;
  private:
  bool _internal_has_averagepacktemp() const;
  public:
  void clear_averagepacktemp();
  ::PROTOBUF_NAMESPACE_ID::int32 averagepacktemp() const;
  void set_averagepacktemp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_averagepacktemp() const;
  void _internal_set_averagepacktemp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TeslaBMS.Pack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pack_ModulesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 numberofmodules_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentvoltage_;
  ::PROTOBUF_NAMESPACE_ID::int32 averagepacktemp_;
  friend struct ::TableStruct_tesla_5fbms_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Pack_Module_Cell

// repeated int32 cellId = 1;
inline int Pack_Module_Cell::_internal_cellid_size() const {
  return cellid_.size();
}
inline int Pack_Module_Cell::cellid_size() const {
  return _internal_cellid_size();
}
inline void Pack_Module_Cell::clear_cellid() {
  cellid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack_Module_Cell::_internal_cellid(int index) const {
  return cellid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack_Module_Cell::cellid(int index) const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.Cell.cellId)
  return _internal_cellid(index);
}
inline void Pack_Module_Cell::set_cellid(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  cellid_.Set(index, value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.Cell.cellId)
}
inline void Pack_Module_Cell::_internal_add_cellid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  cellid_.Add(value);
}
inline void Pack_Module_Cell::add_cellid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_cellid(value);
  // @@protoc_insertion_point(field_add:TeslaBMS.Pack.Module.Cell.cellId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Pack_Module_Cell::_internal_cellid() const {
  return cellid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Pack_Module_Cell::cellid() const {
  // @@protoc_insertion_point(field_list:TeslaBMS.Pack.Module.Cell.cellId)
  return _internal_cellid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Pack_Module_Cell::_internal_mutable_cellid() {
  return &cellid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Pack_Module_Cell::mutable_cellid() {
  // @@protoc_insertion_point(field_mutable_list:TeslaBMS.Pack.Module.Cell.cellId)
  return _internal_mutable_cellid();
}

// repeated float cellVolt = 2;
inline int Pack_Module_Cell::_internal_cellvolt_size() const {
  return cellvolt_.size();
}
inline int Pack_Module_Cell::cellvolt_size() const {
  return _internal_cellvolt_size();
}
inline void Pack_Module_Cell::clear_cellvolt() {
  cellvolt_.Clear();
}
inline float Pack_Module_Cell::_internal_cellvolt(int index) const {
  return cellvolt_.Get(index);
}
inline float Pack_Module_Cell::cellvolt(int index) const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.Cell.cellVolt)
  return _internal_cellvolt(index);
}
inline void Pack_Module_Cell::set_cellvolt(int index, float value) {
  cellvolt_.Set(index, value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.Cell.cellVolt)
}
inline void Pack_Module_Cell::_internal_add_cellvolt(float value) {
  cellvolt_.Add(value);
}
inline void Pack_Module_Cell::add_cellvolt(float value) {
  _internal_add_cellvolt(value);
  // @@protoc_insertion_point(field_add:TeslaBMS.Pack.Module.Cell.cellVolt)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pack_Module_Cell::_internal_cellvolt() const {
  return cellvolt_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pack_Module_Cell::cellvolt() const {
  // @@protoc_insertion_point(field_list:TeslaBMS.Pack.Module.Cell.cellVolt)
  return _internal_cellvolt();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pack_Module_Cell::_internal_mutable_cellvolt() {
  return &cellvolt_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pack_Module_Cell::mutable_cellvolt() {
  // @@protoc_insertion_point(field_mutable_list:TeslaBMS.Pack.Module.Cell.cellVolt)
  return _internal_mutable_cellvolt();
}

// repeated string balanceState = 3;
inline int Pack_Module_Cell::_internal_balancestate_size() const {
  return balancestate_.size();
}
inline int Pack_Module_Cell::balancestate_size() const {
  return _internal_balancestate_size();
}
inline void Pack_Module_Cell::clear_balancestate() {
  balancestate_.Clear();
}
inline std::string* Pack_Module_Cell::add_balancestate() {
  // @@protoc_insertion_point(field_add_mutable:TeslaBMS.Pack.Module.Cell.balanceState)
  return _internal_add_balancestate();
}
inline const std::string& Pack_Module_Cell::_internal_balancestate(int index) const {
  return balancestate_.Get(index);
}
inline const std::string& Pack_Module_Cell::balancestate(int index) const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.Cell.balanceState)
  return _internal_balancestate(index);
}
inline std::string* Pack_Module_Cell::mutable_balancestate(int index) {
  // @@protoc_insertion_point(field_mutable:TeslaBMS.Pack.Module.Cell.balanceState)
  return balancestate_.Mutable(index);
}
inline void Pack_Module_Cell::set_balancestate(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.Cell.balanceState)
  balancestate_.Mutable(index)->assign(value);
}
inline void Pack_Module_Cell::set_balancestate(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.Cell.balanceState)
  balancestate_.Mutable(index)->assign(std::move(value));
}
inline void Pack_Module_Cell::set_balancestate(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  balancestate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TeslaBMS.Pack.Module.Cell.balanceState)
}
inline void Pack_Module_Cell::set_balancestate(int index, const char* value, size_t size) {
  balancestate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TeslaBMS.Pack.Module.Cell.balanceState)
}
inline std::string* Pack_Module_Cell::_internal_add_balancestate() {
  return balancestate_.Add();
}
inline void Pack_Module_Cell::add_balancestate(const std::string& value) {
  balancestate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TeslaBMS.Pack.Module.Cell.balanceState)
}
inline void Pack_Module_Cell::add_balancestate(std::string&& value) {
  balancestate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TeslaBMS.Pack.Module.Cell.balanceState)
}
inline void Pack_Module_Cell::add_balancestate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  balancestate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TeslaBMS.Pack.Module.Cell.balanceState)
}
inline void Pack_Module_Cell::add_balancestate(const char* value, size_t size) {
  balancestate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TeslaBMS.Pack.Module.Cell.balanceState)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Pack_Module_Cell::balancestate() const {
  // @@protoc_insertion_point(field_list:TeslaBMS.Pack.Module.Cell.balanceState)
  return balancestate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Pack_Module_Cell::mutable_balancestate() {
  // @@protoc_insertion_point(field_mutable_list:TeslaBMS.Pack.Module.Cell.balanceState)
  return &balancestate_;
}

// -------------------------------------------------------------------

// Pack_Module

// required string id = 1;
inline bool Pack_Module::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pack_Module::has_id() const {
  return _internal_has_id();
}
inline void Pack_Module::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pack_Module::id() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.id)
  return _internal_id();
}
inline void Pack_Module::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.id)
}
inline std::string* Pack_Module::mutable_id() {
  // @@protoc_insertion_point(field_mutable:TeslaBMS.Pack.Module.id)
  return _internal_mutable_id();
}
inline const std::string& Pack_Module::_internal_id() const {
  return id_.Get();
}
inline void Pack_Module::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pack_Module::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TeslaBMS.Pack.Module.id)
}
inline void Pack_Module::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TeslaBMS.Pack.Module.id)
}
inline void Pack_Module::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TeslaBMS.Pack.Module.id)
}
inline std::string* Pack_Module::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pack_Module::release_id() {
  // @@protoc_insertion_point(field_release:TeslaBMS.Pack.Module.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pack_Module::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TeslaBMS.Pack.Module.id)
}

// required float moduleVoltage = 2;
inline bool Pack_Module::_internal_has_modulevoltage() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pack_Module::has_modulevoltage() const {
  return _internal_has_modulevoltage();
}
inline void Pack_Module::clear_modulevoltage() {
  modulevoltage_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Pack_Module::_internal_modulevoltage() const {
  return modulevoltage_;
}
inline float Pack_Module::modulevoltage() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.moduleVoltage)
  return _internal_modulevoltage();
}
inline void Pack_Module::_internal_set_modulevoltage(float value) {
  _has_bits_[0] |= 0x00000002u;
  modulevoltage_ = value;
}
inline void Pack_Module::set_modulevoltage(float value) {
  _internal_set_modulevoltage(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.moduleVoltage)
}

// required float moduleTemp = 3;
inline bool Pack_Module::_internal_has_moduletemp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pack_Module::has_moduletemp() const {
  return _internal_has_moduletemp();
}
inline void Pack_Module::clear_moduletemp() {
  moduletemp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Pack_Module::_internal_moduletemp() const {
  return moduletemp_;
}
inline float Pack_Module::moduletemp() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.moduleTemp)
  return _internal_moduletemp();
}
inline void Pack_Module::_internal_set_moduletemp(float value) {
  _has_bits_[0] |= 0x00000004u;
  moduletemp_ = value;
}
inline void Pack_Module::set_moduletemp(float value) {
  _internal_set_moduletemp(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.moduleTemp)
}

// required float lowestCellVolt = 4;
inline bool Pack_Module::_internal_has_lowestcellvolt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pack_Module::has_lowestcellvolt() const {
  return _internal_has_lowestcellvolt();
}
inline void Pack_Module::clear_lowestcellvolt() {
  lowestcellvolt_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Pack_Module::_internal_lowestcellvolt() const {
  return lowestcellvolt_;
}
inline float Pack_Module::lowestcellvolt() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.lowestCellVolt)
  return _internal_lowestcellvolt();
}
inline void Pack_Module::_internal_set_lowestcellvolt(float value) {
  _has_bits_[0] |= 0x00000008u;
  lowestcellvolt_ = value;
}
inline void Pack_Module::set_lowestcellvolt(float value) {
  _internal_set_lowestcellvolt(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.lowestCellVolt)
}

// required float highestCellVolt = 5;
inline bool Pack_Module::_internal_has_highestcellvolt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pack_Module::has_highestcellvolt() const {
  return _internal_has_highestcellvolt();
}
inline void Pack_Module::clear_highestcellvolt() {
  highestcellvolt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Pack_Module::_internal_highestcellvolt() const {
  return highestcellvolt_;
}
inline float Pack_Module::highestcellvolt() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.Module.highestCellVolt)
  return _internal_highestcellvolt();
}
inline void Pack_Module::_internal_set_highestcellvolt(float value) {
  _has_bits_[0] |= 0x00000010u;
  highestcellvolt_ = value;
}
inline void Pack_Module::set_highestcellvolt(float value) {
  _internal_set_highestcellvolt(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.Module.highestCellVolt)
}

// map<int32, .TeslaBMS.Pack.Module.Cell> cells = 6;
inline int Pack_Module::_internal_cells_size() const {
  return cells_.size();
}
inline int Pack_Module::cells_size() const {
  return _internal_cells_size();
}
inline void Pack_Module::clear_cells() {
  cells_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >&
Pack_Module::_internal_cells() const {
  return cells_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >&
Pack_Module::cells() const {
  // @@protoc_insertion_point(field_map:TeslaBMS.Pack.Module.cells)
  return _internal_cells();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >*
Pack_Module::_internal_mutable_cells() {
  return cells_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module_Cell >*
Pack_Module::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_map:TeslaBMS.Pack.Module.cells)
  return _internal_mutable_cells();
}

// -------------------------------------------------------------------

// Pack

// required string name = 1;
inline bool Pack::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pack::has_name() const {
  return _internal_has_name();
}
inline void Pack::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Pack::name() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.name)
  return _internal_name();
}
inline void Pack::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.name)
}
inline std::string* Pack::mutable_name() {
  // @@protoc_insertion_point(field_mutable:TeslaBMS.Pack.name)
  return _internal_mutable_name();
}
inline const std::string& Pack::_internal_name() const {
  return name_.Get();
}
inline void Pack::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Pack::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TeslaBMS.Pack.name)
}
inline void Pack::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TeslaBMS.Pack.name)
}
inline void Pack::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TeslaBMS.Pack.name)
}
inline std::string* Pack::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Pack::release_name() {
  // @@protoc_insertion_point(field_release:TeslaBMS.Pack.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Pack::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TeslaBMS.Pack.name)
}

// required int32 id = 2;
inline bool Pack::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pack::has_id() const {
  return _internal_has_id();
}
inline void Pack::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::id() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.id)
  return _internal_id();
}
inline void Pack::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void Pack::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.id)
}

// required int32 numberOfModules = 3;
inline bool Pack::_internal_has_numberofmodules() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pack::has_numberofmodules() const {
  return _internal_has_numberofmodules();
}
inline void Pack::clear_numberofmodules() {
  numberofmodules_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::_internal_numberofmodules() const {
  return numberofmodules_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::numberofmodules() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.numberOfModules)
  return _internal_numberofmodules();
}
inline void Pack::_internal_set_numberofmodules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  numberofmodules_ = value;
}
inline void Pack::set_numberofmodules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_numberofmodules(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.numberOfModules)
}

// required int32 currentVoltage = 4;
inline bool Pack::_internal_has_currentvoltage() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pack::has_currentvoltage() const {
  return _internal_has_currentvoltage();
}
inline void Pack::clear_currentvoltage() {
  currentvoltage_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::_internal_currentvoltage() const {
  return currentvoltage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::currentvoltage() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.currentVoltage)
  return _internal_currentvoltage();
}
inline void Pack::_internal_set_currentvoltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  currentvoltage_ = value;
}
inline void Pack::set_currentvoltage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_currentvoltage(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.currentVoltage)
}

// required int32 averagePacktemp = 5;
inline bool Pack::_internal_has_averagepacktemp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pack::has_averagepacktemp() const {
  return _internal_has_averagepacktemp();
}
inline void Pack::clear_averagepacktemp() {
  averagepacktemp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::_internal_averagepacktemp() const {
  return averagepacktemp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pack::averagepacktemp() const {
  // @@protoc_insertion_point(field_get:TeslaBMS.Pack.averagePacktemp)
  return _internal_averagepacktemp();
}
inline void Pack::_internal_set_averagepacktemp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  averagepacktemp_ = value;
}
inline void Pack::set_averagepacktemp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_averagepacktemp(value);
  // @@protoc_insertion_point(field_set:TeslaBMS.Pack.averagePacktemp)
}

// map<int32, .TeslaBMS.Pack.Module> modules = 6;
inline int Pack::_internal_modules_size() const {
  return modules_.size();
}
inline int Pack::modules_size() const {
  return _internal_modules_size();
}
inline void Pack::clear_modules() {
  modules_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >&
Pack::_internal_modules() const {
  return modules_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >&
Pack::modules() const {
  // @@protoc_insertion_point(field_map:TeslaBMS.Pack.modules)
  return _internal_modules();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >*
Pack::_internal_mutable_modules() {
  return modules_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::TeslaBMS::Pack_Module >*
Pack::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:TeslaBMS.Pack.modules)
  return _internal_mutable_modules();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TeslaBMS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tesla_5fbms_2eproto
